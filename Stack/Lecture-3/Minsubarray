class Solution {
    public int sumSubarrayMins(int[] arr) {
        int n = arr.length;
        int MOD = 1_000_000_007;

       ArrayList<Integer> nsl = new ArrayList<>();
ArrayList<Integer> nsr = new ArrayList<>();

for (int i = 0; i < n; i++) {
    nsl.add(-1); 
    nsr.add(n);  
}


        Stack<Integer> st = new Stack<>();

        for (int i = 0; i < n; i++) {
            while (!st.isEmpty() && arr[st.peek()] > arr[i]) {
                st.pop();
            }
            if (!st.isEmpty()) {
                nsl.set(i, st.peek());
            }
            st.push(i);
        }

        st.clear();

        for (int i = n - 1; i >= 0; i--) {
            while (!st.isEmpty() && arr[st.peek()] >= arr[i]) {
                st.pop();
            }
            if (!st.isEmpty()) {
                nsr.set(i, st.peek());
            }
            st.push(i);
        }

        long sum = 0;
        for (int i = 0; i < n; i++) {
            long left = i - nsl.get(i);
            long right = nsr.get(i) - i;
            sum = (sum + (long) arr[i] * left * right) % MOD;
        }

        return (int) sum;
    }
}
