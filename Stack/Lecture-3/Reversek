
//brute force
class Solution {
    public Queue<Integer> reverseFirstK(Queue<Integer> q, int k) {
        if (q == null || q.isEmpty() || k <= 0 || k > q.size())
            return q;

        List<Integer> temp = new ArrayList<>();
        for (int i = 0; i < k; i++) {
            temp.add(q.remove());
        }

        for (int i = k - 1; i >= 0; i--) {
            q.offer(temp.get(i));
        }

        int remaining = q.size() - k;
        for (int i = 0; i < remaining; i++) {
            q.offer(q.remove());
        }

        return q;
    }
}


//optimal


class Solution {
    public Queue<Integer> reverseFirstK(Queue<Integer> q, int k) {
        if (q == null || q.isEmpty() || k <= 0) return q;
        if (k > q.size()) return q; 
        Stack<Integer>st=new Stack<>();
        for(int i=0;i<k;i++){
            st.push(q.remove());
        }
        for(int i=0;i<k;i++){
            q.offer(st.pop());
        }
        
        int count=q.size()-k;
        for(int i=0;i<count;i++){
            q.offer(q.remove());
        }
        return q;
    }
}
is this optijmal