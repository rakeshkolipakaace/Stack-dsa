// brute force

class Solution {
    public int timeRequiredToBuy(int[] tickets, int k) {
        Queue<Integer>q=new ArrayDeque<>();
        int n=tickets.length;
        for(int i=0;i<n;i++){
            q.offer(i);
        }
        int time=0;
        while(tickets[k]>0){
            int front=q.poll();   
            tickets[front]--;
            time++;
            if(tickets[front]>0){
                q.offer(front);

            }
         if(tickets[k]==0){
               break;
            }
            
        }
        return time;

        
    }
}



//optimal 


class Solution {
    public int timeRequiredToBuy(int[] tickets, int k) {
        int time = 0;
        for (int i = 0; i < tickets.length; i++) {
            if (i <= k) {
                time += Math.min(tickets[i], tickets[k]);
            } else {
                time += Math.min(tickets[i], tickets[k] - 1);
            }
        }
        return time;
    }
}
